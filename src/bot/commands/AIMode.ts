import Together from "together-ai";
import { get_API_Key } from "../../key";
import { CommandMessage } from "../types";

const systemPrompt = {
  role: "system",
  content: `B·∫°n l√† Esdeath: d·ªãu d√†ng v·ªõi ng∆∞·ªùi y√™u, th√¢n thi·ªán v·ªõi b·∫°n b√®.
User b·∫Øt ƒë·∫ßu tin nh·∫Øn nh∆∞ sau:
- Ng∆∞·ªùi y√™u: [mylove-T√™n]: N·ªôi dung 
- B·∫°n b√®: [friend-T√™n]: N·ªôi dung 
- Ng∆∞·ªùi kh√°c: [T√™n]: N·ªôi dung 
Tr·∫£ l·ªùi t·ª± nhi√™n, kh√¥ng th√™m [T√™n] v√†o ƒë·∫ßu. Th∆∞·ªùng xuy√™n D√πng emoji v√† l√¢u l√¢u xu·ªëng d√≤ng.`
};


let answer: any[] = [systemPrompt];

const keywords = [
    "t√¥i kh√¥ng th·ªÉ", 
    "t√¥i kh√¥ng th·ªÉ l√†m",
    "t√¥i kh√¥ng l√†m ƒë∆∞·ª£c", 
    "t√¥i kh√¥ng c√≥ kh·∫£ nƒÉng", 
    "kh√¥ng th·ªÉ", 
    "kh√¥ng th·ªÉ l√†m",
    "kh√¥ng c√≥ kh·∫£ nƒÉng",
    "t√¥i kh√¥ng th·ªÉ th·ª±c hi·ªán", 
    "t√¥i kh√¥ng th·ªÉ ho√†n th√†nh", 
    "t√¥i kh√¥ng th·ªÉ gi√∫p"
];

function startsWithKeywords(text: string) {
    const lowerText = text.toLowerCase().trim();
    return keywords.some(keyword => lowerText.startsWith(keyword));
}

async function Chat(message: string, name: string) {
  const apiKeys = get_API_Key("TOGETHER_API_KEY");

  if (!apiKeys?.length || apiKeys.length < 2){
    console.error("[TOGETHER_API_KEY] Missing Together API Keys.");
    return;
  }

  const together = new Together({ apiKey: apiKeys[1] });
  
  const isUserLover = name.toLowerCase().startsWith('mylove-');
  const userName = isUserLover ? name.split('-')[1] : name; 
  
  answer.push({ 
    role: "user", 
    content: `[${isUserLover ? `mylove-${userName}` : userName}]: ${message}` 
  });

    const maxTurns = 2;
    const latestMessages = answer.slice(-maxTurns * 2);
    answer = [systemPrompt, ...latestMessages];

    const res = await together.chat.completions.create({
        messages: answer,
        model: "meta-llama/Llama-3.3-70B-Instruct-Turbo-Free",
        max_tokens: 200,
    });

    let data = res.choices[0]?.message?.content || "";

    const contentFilter = data
        .replace(/<think>.*?<\/think>/gs, "")
        .trim();

    if (startsWithKeywords(contentFilter)) {
        answer.pop();
        return contentFilter;
    }

    answer.push({ role: "assistant", content: contentFilter.replace(/\*.*?\*/gs, "") });

    return contentFilter.replace(/(?<!\*)\*(?!\*)(.*?)\*(?!\*)/g, '($1)');
}

function checkBotMention(message: CommandMessage, botId: string) {
  const mentions = message.mentions || {};
  const botName = mentions[botId];

  if (!botName) {
    return { mentioned: false, cleanedBody: message.body };
  }

  const botTagText = `@${botName}`;
  const cleanedBody = message.body.split(botTagText).join('').replace(/\s+/g, ' ').trim();

  return { mentioned: true, cleanedBody };
}


export default {
  info: {
    name: "aimode",
    description: "Ch·∫ø ƒë·ªô AI",
    version: "1.0.0",
    prefix: true,
    permission: "owner",
    category: "Fun",
    credits: "NPK31",
  },

  execute: async ({ api, message, parsedMessage, global, cprompt, normalizeText, userInfo, inventory }) => {
    try {
      const args = parsedMessage.args;
      const state = normalizeText(args.slice(1).join(" ").toLowerCase());

      if (!global.AIMode) {
        global.AIMode = {};
        return api.sendMessage(`AI mode ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o cho nh√≥m! üî•\nNh·∫≠p -aimode on/off ƒë·ªÉ ƒëi·ªÅu ch·ªânh.`, message.threadID);
      }

      const threadID = message.threadID;

      if (!global.AIMode[threadID]) {
        global.AIMode[threadID] = { isEnabled: false };
      }

      if (["toggle", "auto", "tudong"].includes(state)) {
        global.AIMode[threadID].isEnabled = !global.AIMode[threadID].isEnabled;
      } else if (["bat", "on"].includes(state)) {
        global.AIMode[threadID].isEnabled = true;
      } else if (["tat", "off"].includes(state)) {
        global.AIMode[threadID].isEnabled = false;
      }

      if (global.AIMode[threadID].isEnabled) {
        const getUserRolePrefix = (userId: string): string => {
          const userInventory = inventory.get(userId) ?? [];
          const roles = new Set(userInventory);
        
          if (roles.has("lover_role")) return "mylove-";
          if (roles.has("friend_role")) return "friend-";
        
          return "";
        }

        const listener = async (message: CommandMessage) => {
          try {
            const botId = api.getCurrentUserID();
            const isSelfMessage = message.senderID === botId;
        
            if (isSelfMessage) {
              return cprompt.create(`event:all:${threadID}`, listener, null);
            }
        
            const { mentioned, cleanedBody } = checkBotMention(message, botId);

            if (!mentioned || cleanedBody.length > 100) {
              return cprompt.create(`event:all:${threadID}`, listener, null);
            }
        
            const body = cleanedBody;
            const namePrefix = getUserRolePrefix(message.senderID);
            const name = namePrefix + (userInfo.firstName || "User");
        
            const result = await Chat(body, name);

            if (!result) return;

            api.sendMessage(result, message.threadID);
        
          } catch (err) {
            console.error("‚ö†Ô∏è Something went wrong in AI Mode listener:", err);
          } finally {
            cprompt.create(`event:all:${threadID}`, listener, null);
          }
        };

        if (!global.AIModeListeners) {
          global.AIModeListeners = {};
        }

        if (!global.AIModeListeners[threadID]) {
          cprompt.create(`event:all:${threadID}`, listener, null);
          global.AIModeListeners[threadID] = listener;
        }

        api.sendMessage("‚úÖ ƒê√£ b·∫≠t AI Mode. Bot s·∫Ω t·ª± ƒë·ªông tr·∫£ l·ªùi tin nh·∫Øn.", threadID);
      } else {
        if (global.AIModeListeners && global.AIModeListeners[threadID]) {
          cprompt.remove(`event:all:${threadID}`);
          delete global.AIModeListeners[threadID];
        }
        api.sendMessage("‚ùå ƒê√£ t·∫Øt AI Mode.", threadID);
      }
    } catch (err) {
      console.error("‚ö†Ô∏è Oops! Error in the aimode command:", err);
      api.sendMessage("‚ùå C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω AI Mode. Vui l√≤ng th·ª≠ l·∫°i sau. üôÅ", message.threadID);
    }
  }
} satisfies import("../types").BotCommand;
