import { getInjectedCommandsNameList, toggleCommand } from "../utils/command";
import { reloadModule } from "../utils/cache";
import path from "path";

export default {
  info: {
    name: "module",
    description: "Qu·∫£n l√Ω v√† ƒëi·ªÅu khi·ªÉn c√°c l·ªánh m·ªü r·ªông trong h·ªá th·ªëng.",
    version: "1.0.0",
    prefix: true,
    hidden: true,
    usage: "module <list|toggle> [on|off] [t√™n module]",
    example: [
      "module list",
      "module toggle on greet",
      "module toggle off joke"
    ],
    aliases: ["mod", "modules"],
    permission: "admin",
    category: "Admin",
    credits: "NPK31"
  },

  execute: async ({api, message, manager, parsedMessage}) =>{
    const args = parsedMessage.args;
    const method = args[1];

    try {
      if (method === "list") {
        const result = getInjectedCommandsNameList();
      
        if (!result) return api.sendMessage(`·ª¶a, danh s√°ch tr·ªëng tr∆°n r·ªìi... ch·∫≥ng c√≥ g√¨ h·∫øt. üòÖ`, message.threadID);
      
        api.sendMessage(
          {body: `üì¶ Danh s√°ch l·ªánh m·ªü r·ªông:\n - ${result.join("\n - ")}`, avoid: {
            obfuscate: false,
          }},
          message.threadID
        );
      
        return;
      }

      if (method === "toggle") {
        const name = args[3];
        const state = args[2];

        if (!name || !["on", "off"].includes(state)) {
          return api.sendMessage("‚ö†Ô∏è D√πng: module toggle <on/off> <name> ", message.threadID);
        }

        const commandFilePath = path.resolve(__dirname, "..", "cache", "temp", name, "plugin.ts");

        const module = await reloadModule(commandFilePath, {
          log: { debug: false, info: false },
        });

        if (!module || !module.default?.info) {
          return api.sendMessage(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y module '${name}'.`, message.threadID);
        }

        const commandIndex = manager.commands.findIndex((cmd) => path.basename(path.dirname(cmd.path)) === name);

        if (commandIndex === -1) {
          return api.sendMessage(`‚ö†Ô∏è Module '${name}' kh√¥ng ƒë∆∞·ª£c ƒëƒÉng k√Ω.`, message.threadID);
        }

        const isEnabling = state === "on";
        const currentlyDisabled = manager.commands[commandIndex].disabled;

        if (currentlyDisabled === !isEnabling) {
          return api.sendMessage(`‚ÑπÔ∏è Module '${name}' ƒë√£ ·ªü tr·∫°ng th√°i ${state}.`, message.threadID);
        }

        manager.commands[commandIndex].disabled = !isEnabling;

        let commandName: string | undefined;

        if (Array.isArray(manager.commands[commandIndex].name)) {
          commandName = manager.commands[commandIndex].name.find((name) => name.trim() !== "");
        } else if (typeof manager.commands[commandIndex].name === "string") {
          commandName = manager.commands[commandIndex].name.trim();
        }

        if (commandName) {
          toggleCommand(commandName, isEnabling ? "enable" : "disable");
        } else {
          console.warn(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y t√™n l·ªánh h·ª£p l·ªá cho module '${name}' t·∫°i index ${commandIndex}.`);
          return api.sendMessage(`‚ö†Ô∏è Kh√¥ng th·ªÉ th·ª±c hi·ªán y√™u c·∫ßu tr√™n module '${name}' do t√™n l·ªánh kh√¥ng h·ª£p l·ªá.`, message.threadID);
        }

        api.sendMessage(`‚úÖ ƒê√£ ${isEnabling ? "b·∫≠t" : "t·∫Øt"} Module '${name}'.`, message.threadID);
      }
    } catch (error) {
      console.error("‚ùå Error in Command: ", error);
      api.sendMessage("‚ö†Ô∏è ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω l·ªánh.", message.threadID);
    }
  },
} satisfies import("../types").BotCommand;
