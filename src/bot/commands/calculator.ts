export default {
  info: {
    name: "(\\d+(\\.\\d+)?(\\s*[-+\\/*^%]\\s*\\d+(\\.\\d+)?)+)\\s*=\\?",
    description: "M√°y t√≠nh mini",
    version: "1.2.0",
    prefix: false,
    hidden: true,
    offline: true,
    category: "NPK31",
    cooldown: 2000
  },

  execute: ({ api, message, parsedMessage }) => {
    const body = parsedMessage.body.trim();
    const match = body.match(/^(.+)=\s*\?$/);
    if (!match) return;

    let expression = match[1].trim();

    if (!/^[\d\s+\-*/^%().]+$/.test(expression)) {
      return api.sendMessage("üö´ Ch·ªâ h·ªó tr·ª£ c√°c ph√©p t√≠nh: +, -, *, /, ^, % v√† s·ªë!", message.threadID);
    }

    expression = expression.replace(/(\d+(\.\d+)?|\(.+?\))\s*\^\s*(\d+(\.\d+)?|\(.+?\))/g, (match, base, _, exponent) => {
      return `Math.pow(${base}, ${exponent})`;
    });

    try {
      const result = evaluateSafe(expression);
      api.sendMessage(`${result}`, message.threadID);
    } catch (err) {
      api.sendMessage("‚ö†Ô∏è Bi·ªÉu th·ª©c kh√¥ng h·ª£p l·ªá ho·∫∑c c√≥ l·ªói khi t√≠nh to√°n.", message.threadID);
    }
  },
} satisfies import("../types").BotCommand;


function evaluateSafe(expression: string): number {
  const safeExpression = expression.replace(/[^\d+\-*/().^%]/g, '');
  
  try {
    return eval(safeExpression);
  } catch (err) {
    throw new Error("L·ªói khi ƒë√°nh gi√° bi·ªÉu th·ª©c.");
  }
}