import path from "path";
import Jimp from "jimp";

type printType = <T>(message: T) => void;
type N_B = number | boolean;

interface Sicbo_Images {
    dices: { index: 1 | 2 | 3 | 4 | 5 | 6; link?: string; url?: string }[];
    save_location: string;
}

interface SicBo_ITF {
    print: printType;
    benchmark: number;
    number_of_dice: number;
    options: string[];
}

interface Result_POB {
    dices_score: number[];
    total_score: number;
    win: N_B;
    bet: number;
    message?: string;
}

interface MarkDown {
    bold: string;
    italic: string;
    strikeThrough: string;
    list: string;
}


class SicBo_Game implements SicBo_ITF {
    print: printType;
    benchmark: number;
    number_of_dice: number;
    options: string[];
    markDown: MarkDown;
    publicSrc: string;
    
    constructor(benchmark: number, number_of_dice: number, print: printType, options: string[] = ["Under", "Over"]) {
        this.benchmark = benchmark;
        this.number_of_dice = number_of_dice;
        this.options = options;
        this.print = print;
        this.markDown = { bold: "**", italic: "#", strikeThrough: "~~", list: "-" };
        this.publicSrc = path.resolve(__dirname, "..", "public", "sicbo")
    }

    public GetDefaultImages(): Sicbo_Images {
        return {
            dices: Array.from({ length: 6 }, (_, i) => ({
                index: (i + 1) as 1 | 2 | 3 | 4 | 5 | 6,
                url: `${path.resolve(this.publicSrc, (Array.from({ length: 6 }, (_, i) => `${i + 1}d`))[i])}.png`
            })),
            save_location: path.resolve(this.publicSrc, "result.png")
        };
    }

    public PlaceOfBet(bet: number, language: "EN" | "VI", output: boolean = false): Result_POB {
        const dices_score = Array.from({ length: this.number_of_dice }, () => Math.floor(Math.random() * 6) + 1);
        const total_score = dices_score.reduce((acc, curr) => acc + curr, 0);
        const win = total_score >= this.benchmark ? 1 : 0;
        const result: Result_POB = { dices_score, total_score, win: win === bet, bet };
        
        result.message = this.generateMessage(result, language);
        if (output) this.print(result.message);
        
        return result;
    }

    private generateMessage(result: Result_POB, language: "EN" | "VI"): string {
        const { dices_score, total_score, win, bet } = result;
        const { bold, list } = this.markDown;
        
        const list_dice_score = dices_score.map((value, index) => ` ${list} ${bold}${language === "VI" ? "XÃºc xáº¯c" : "Dice"} ${index + 1}:${bold} ${value}`).join("\n");
        
        return `${bold}${language === "VI" ? "Káº¾T QUáº¢ NÃ‰M XÃšC Sáº®C" : "DICE ROLL RESULTS"}${bold}\n${list_dice_score}\n` +
               ` ${list} ${bold}${language === "VI" ? "Tá»•ng Ä‘iá»ƒm" : "Total Score"}:${bold} ${total_score}\n` +
               ` ${list} ${bold}${language === "VI" ? "Cá»­a Ä‘áº·t cÆ°á»£c" : "Betting Option"}:${bold} ${this.options[bet]}\n` +
               ` ${list} ${bold}${language === "VI" ? "Káº¿t quáº£" : "Result"}:${bold} ${win ? (language === "VI" ? "Tháº¯ng" : "Win") : (language === "VI" ? "Thua" : "Lose")}\n\n` +
               (language === "VI" ? "ChÃºc báº¡n may máº¯n á»Ÿ láº§n chÆ¡i tiáº¿p theo! ðŸŽ²" : "Good luck on your next game! ðŸŽ²");
    }

    public async CreateResultImage(images: Sicbo_Images, dices_score: number[]) {
        const X_OFFSET = 120;
        const Y_OFFSET = 138;
        const DICE_WIDTH = 225;
        const DICE_HEIGHT = 225;
        const DICE_SPACING = 20;
        const DICE_SCALE = 1.35;
    
        try {
            if (!images.dices) {
                throw new Error("images.dices is undefined.");
            }
    
            const numDices = dices_score.length;
            const columns = numDices <= 3 ? numDices : 3;
            const rows = Math.ceil(numDices / 3);
    
            let width = columns * (DICE_WIDTH * DICE_SCALE + DICE_SPACING) + X_OFFSET * 1.3;
            let height = rows * (DICE_HEIGHT * DICE_SCALE + DICE_SPACING) + Y_OFFSET * 1.3;
    
            width = Math.max(1, Math.floor(width));
            height = Math.max(1, Math.floor(height));
    
            // Create a white background image with the specified size
            const baseImg = new Jimp(width, height, 0xffffffff);
    
            // Load dice images
            const diceImagePromises = dices_score.map(async (value) => {
                const index = images.dices.findIndex(item => item.index === value);
                if (index === -1) throw new Error(`Dice with index ${value} does not exist.`);
    
                const image_object = images.dices[index];
                const link = image_object.link ?? image_object.url;
    
                if (!link) {
                    throw new Error(`No valid link or URL found for dice index: ${value}.`);
                }
    
                try {
                    return await Jimp.read(link);
                } catch (err) {
                    const errorMessage = err instanceof Error ? err.message : "Unknown error";
                    throw new Error(`Failed to load image from ${link}: ${errorMessage}`);
                }
            });
    
            const dices_image = await Promise.all(diceImagePromises);
    
            // Overlay dice images onto the background
            dices_image.forEach((overImg, index) => {
                overImg.resize(DICE_WIDTH, DICE_HEIGHT);
                const col = index % columns;
                const row = Math.floor(index / columns);
                baseImg.composite(
                    overImg,
                    X_OFFSET + col * (DICE_WIDTH * DICE_SCALE + DICE_SPACING),
                    Y_OFFSET + row * (DICE_HEIGHT * DICE_SCALE + DICE_SPACING),
                    { mode: Jimp.BLEND_SOURCE_OVER, opacitySource: 1, opacityDest: 1 }
                );
            });
    
            // Save the final image
            await baseImg.writeAsync(images.save_location);
            console.log("The result image has been successfully created!");
        } catch (error) {
            console.error("Error while creating the result image:", error);
            throw error;
        }
    }
    
    
}

export { SicBo_Game, SicBo_ITF, Sicbo_Images };
